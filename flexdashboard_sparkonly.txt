---
title: "Whites wine quality"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
---

```{r setup, include=FALSE}

load('/home/rstudio-user/result.Rdata')

library(sparklyr)
library(knitr)
library(tidyr)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(jsonlite)
library(kableExtra)

Sys.setenv(SPARK_HOME='/usr/lib/spark')
sc <- spark_connect(master = "yarn-client", version = "2.1.0")
Wine_tbl <- copy_to(sc, Wine)
ml_formula <- formula(quality ~ fixed_acidity + volatile_acidity + citric_acid + residual_sugar + chlorides+free_sulfur_dioxide+total_sulfur_dioxide+ density + pH + sulphates + alcohol)

# Bundle the modelss into a single list object
ml_models <- list(
  "Linear" = ml_lm,
  "Decision Tree" = ml_dt,
  "Random Forest" = ml_rf,
  "Naive Bayes" = ml_nb
)

```
Variables
=======================================================================
Row {.tabset}
-----------------------------------------------------------------------

### residual_sugar

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=residual_sugar,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### pH

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=pH,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### alcohol

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=alcohol,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### sulphates

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=sulphates,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### fixed_acidity

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=fixed_acidity,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### volatile_acidity

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=volatile_acidity,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### citric_acid

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=citric_acid,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### chlorides

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=chlorides,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

### free_sulfur_dioxide

```{r}
Wine_tbl %>% 
  ggplot(aes(x=quality,y=free_sulfur_dioxide,fill=quality))+
  geom_boxplot()+#fill=c('red','green','yellow','yellow','yellow','yellow','yellow'),alpha=0.2)+
  theme(legend.position="none")+
  scale_fill_brewer(palette="BuPu")
```

Machine Learning Result
=======================================================================
Row{.tabset}
-----------------------------------------------------------------------

### Feature Importance
    
```{r  fig.height = 6, fig.width = 9}



# Plot results
feature_importance %>%
  ggplot(aes(reorder(feature, importance), importance, fill = Model)) + 
  facet_wrap(~Model) +
  geom_bar(stat = "identity") + 
  coord_flip() +
  labs(title = "Feature importance",
       x = NULL) +
  theme(legend.position = "none")


```

Model Comparison
=======================================================================
Column
-----------------------------------------------------------------------
```{r  fig.height = 6, fig.width = 10}
# Number of reps per model
n <- 10

# Format model formula as character
format_as_character <- function(x){
  x <- paste(deparse(x), collapse = "")
  x <- gsub("\\s+", " ", paste(x, collapse = ""))
  x
}

# Create model statements with timers
format_statements <- function(y){
  y <- format_as_character(y[[".call"]])
  y <- gsub('ml_formula', ml_formula_char, y)
  y <- paste0("system.time(", y, ")")
  y
}

# Convert model formula to character
ml_formula_char <- format_as_character(ml_formula)

# Create n replicates of each model statements with timers
all_statements <- map_chr(ml_models, format_statements) %>%
  rep(., n) %>%
  parse(text = .)

# Evaluate all model statements
res <- map(all_statements, eval)

# Compile results
result <- data_frame(model = rep(names(ml_models), n),
                     time = map_dbl(res, function(x){as.numeric(x["elapsed"])})) 

# Plot
result %>%
  ggplot(aes(time, reorder(model, time))) + 
  geom_boxplot() + 
  geom_jitter(width = 0.4, aes(color = model)) +
  scale_color_discrete(guide = FALSE) +
  labs(title = "Model training times",
       x = "Seconds",
       y = NULL)

```

